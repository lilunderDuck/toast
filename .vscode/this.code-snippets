{
	// Place your journal-app workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"stylex's style declaration": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "stylex",
		"body": [
			"import stylex from \"@stylexjs/stylex\"",
			"",
			"const style = stylex.create({",
			"  ${1:name}: {",
			"    ${2:some_style}",
			"  }",
			"})"
		],
		"description": "stylex's style declaration"
	},
	"apply stylex styles": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "stylexattr",
		"body": [
			"{...stylex.attrs(style.${1:insert_name_here})}"
		],
		"description": "apply stylex styles"
	},
	"Solidjs's <Contexts.Provider /> component": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "ctx",
		"body": [
			"import { createContext, ParentProps, useContext } from \"solid-js\"",
			"",
			"interface I${1:insert_name}Context {",
			"\t${2:// insert your context props here}",
			"}",
			"",
			"const Context = createContext<I${1:insert_name}Context>()",
			"",
			"interface I${1:insert_name}ProviderProps {",
			"\t${3:// insert your context props here}",
			"}",
			"",
			"export function ${1:insert_name}Provider(props: ParentProps) {",
			"\treturn (",
			"\t\t<Context.Provider value={${4:some_value}}>",
			"\t\t\t{props.children}",
			"\t\t</Context.Provider>",
			"\t)",
			"}",
			"",
			"export function use${1:insert_name}Context() {",
			"\treturn useContext(Context)!",
			"}",
		],
		"description": "Solidjs's <Contexts.Provider /> component"
	},
	"Solidjs's component": {
		"scope": "typescriptreact",
		"prefix": "cmp",
		"body": [
			"interface I${1:ComponentName}Props {",
			"\t${2:// define your component props here}",
			"}",
			"",
			"export function ${1:ComponentName}(props: I${1:ComponentName}Props) {",
			"\treturn (",
			"\t\t${3:<div>Insert your jsx here</div>}",
			"\t)",
			"}",
		],
		"description": "Solidjs's component"
	}
}